{"version":3,"sources":["components/Background.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Background","className","id","stdDeviation","in2","operator","result","floodColor","floodOpacity","in","patternUnits","width","height","patternTransform","filter","pathLength","d","transform","xlinkHref","x","y","fill","TodoItem","props","svg","taskText","onClick","removeTask","viewBox","x1","y1","x2","y2","todoItems","TodoList","handleSubmit","event","preventDefault","state","newTask","trim","setState","taskList","onChange","bind","this","target","name","value","removeText","task","map","item","key","shortid","generate","onSubmit","autoComplete","type","placeholder","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAmCeA,MAjCf,WACI,OACI,yBAAKC,UAAU,cACX,4BAAQC,GAAG,QACP,oCAAgBC,aAAa,MAC7B,iCAAaC,IAAI,gBACLC,SAAS,MAAMC,OAAO,SAClC,6BAASC,WAAW,QAAQC,aAAa,QACzC,iCAAaJ,IAAI,gBACLC,SAAS,OAAOC,OAAO,UACnC,iCAAaG,GAAG,OAAOL,IAAI,WAE/B,6BAASF,GAAG,IAAIQ,aAAa,iBACrBC,MAAM,QAAQC,OAAO,QACrBC,iBAAiB,sBACrB,uBAAGC,OAAO,cACV,uBAAGb,UAAU,WACT,0BAAMC,GAAG,MAAMa,WAAW,QAClBC,EAAE,2CAEFC,UAAU,kBAEtB,yBAAKC,UAAU,OAAOC,EAAE,IAAIC,EAAE,SAC9B,yBAAKF,UAAU,OAAOC,EAAE,MAAMC,EAAE,QAChC,yBAAKF,UAAU,OAAOC,EAAE,OAAOC,EAAE,MACjC,yBAAKF,UAAU,OAAOC,EAAE,OAAOC,EAAE,UAGrC,0BAAMC,KAAK,UAAUV,MAAM,OAAOC,OAAO,W,uECLtCU,MAtBf,SAAkBC,GACd,IAAIC,EAWJ,OATIA,EADmB,iBAAnBD,EAAME,SACA,6BACF,yBAAKxB,UAAU,cAAcyB,QAASH,EAAMI,WAAYhB,MAAM,OAAOiB,QAAQ,aACzE,0BAAMC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKC,GAAG,OAC/B,0BAAMH,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,SAIjC,yBAAK/B,UAAU,kBAGrB,yBAAKA,UAAU,aACX,yBAAKA,UAAU,iBACVuB,GAEL,2BAAID,EAAME,Y,gBCflBQ,EAAY,GAsEDC,E,YAnEX,aAAe,IAAD,8BACV,+CAeJC,aAAe,SAACC,GACZA,EAAMC,iBAC4B,KAA9B,EAAKC,MAAMC,QAAQC,QACnB,EAAKC,SAAS,CACVC,SAAS,CAAE,EAAKJ,MAAMC,QAAQC,QAAtB,mBAAiC,EAAKF,MAAMI,aAG5D,EAAKD,SAAS,CACVF,QAAS,MArBb,EAAKD,MAAQ,CACTC,QAAS,GACTG,SAAU,IAGd,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKjB,WAAa,EAAKA,WAAWiB,KAAhB,gBATR,E,sEAYLR,GACLS,KAAKJ,SAAL,eAAiBL,EAAMU,OAAOC,KAAOX,EAAMU,OAAOE,U,iCAe3CC,GACPJ,KAAKJ,SAAS,CACVC,SAAUG,KAAKP,MAAMI,SAAS5B,OAAO,SAAAoC,GAAI,OAAIA,IAASD,Q,+BAIpD,IAAD,OAOL,OANAhB,EAAYY,KAAKP,MAAMI,SAASS,IAAI,SAAAC,GAChC,OAAO,kBAAC,EAAD,CAAUC,IAAKC,IAAQC,WAAY9B,SAAU2B,EAAMzB,WAAY,kBAAM,EAAKA,WAAWyB,QAElE,MAA1BP,KAAKP,MAAMI,SAAS,KACpBT,EAAY,kBAAC,EAAD,CAAUoB,IAAK,QAAS5B,SAAS,kBAG7C,yBAAKxB,UAAU,kBACX,yBAAKA,UAAU,aACX,wCACA,0BAAMA,UAAU,YAAYuD,SAAUX,KAAKV,aAAcsB,aAAa,OAClE,2BACIV,KAAK,UACLC,MAAOH,KAAKP,MAAMC,QAClBmB,KAAK,OACLf,SAAUE,KAAKF,SACfgB,YAAY,oBAEhB,sCAEJ,yBAAK1D,UAAU,kBACX,yBAAKA,UAAU,cACVgC,U,GA1DN2B,IAAMC,WCOdC,MATf,WACE,OACE,yBAAK7D,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.97d791cc.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Background(){\n    return(\n        <svg className=\"background\">\n            <filter id=\"glow\">\n                <feGaussianBlur stdDeviation=\"2\"/>\n                <feComposite in2=\"SourceGraphic\"\n                            operator=\"out\" result=\"glow\" />\n                <feFlood floodColor=\"white\" floodOpacity=\"0.2\" />\n                <feComposite in2=\"SourceGraphic\"\n                            operator=\"atop\" result=\"light\" />\n                <feComposite in=\"glow\" in2=\"light\" />    \n            </filter>\n            <pattern id=\"p\" patternUnits=\"userSpaceOnUse\"\n                    width=\"180px\" height=\"120px\"\n                    patternTransform=\"scale(1,0.8660254)\">\n                <g filter=\"url(#glow)\">\n                <g className=\"wrapper\">\n                    <path id=\"hex\" pathLength=\"388.5\"\n                            d=\"M-30,-60 30,-60 60,0\n                                    30,60 -30,60 -60,0Z\"\n                            transform=\"scale(0.935)\" />\n                </g>\n                <use xlinkHref=\"#hex\" x=\"0\" y=\"+120\" />\n                <use xlinkHref=\"#hex\" x=\"+90\" y=\"+60\" />\n                <use xlinkHref=\"#hex\" x=\"+180\" y=\"0\" />\n                <use xlinkHref=\"#hex\" x=\"+180\" y=\"120\" />\n                </g>\n            </pattern>\n            <rect fill=\"url(#p)\" width=\"100%\" height=\"100%\"/>\n        </svg>\n    )\n}\n\nexport default Background","import React from 'react'\nimport './style/todoitem.css'\n\nfunction TodoItem(props) {\n    var svg;\n    if (props.taskText !== \"No new tasks\") {\n        svg = <div>\n            <svg className=\"taskRemover\" onClick={props.removeTask} width=\"100%\" viewBox=\"0 0 50 50\">\n                <line x1=\"0\" y1=\"0\" x2=\"50\" y2=\"50\" />\n                <line x1=\"50\" y1=\"0\" x2=\"0\" y2=\"50\" />\n            </svg>\n        </div>\n    } else {\n        svg = <div className=\"svg-container\"></div>\n    }\n    return (\n        <div className=\"todo-item\">\n            <div className=\"svg-container\">\n                {svg}\n            </div>\n            <p>{props.taskText}</p>\n        </div>\n    )\n}\n\nexport default TodoItem","import React from 'react'\nimport './style/todolist.css'\nimport TodoItem from './TodoItem'\nimport shortid from 'shortid'\n\nvar todoItems = []\n\nclass TodoList extends React.Component {\n    constructor() {\n        super()\n\n        this.state = {\n            newTask: \"\",\n            taskList: []\n        }\n\n        this.onChange = this.onChange.bind(this)\n        this.removeTask = this.removeTask.bind(this)\n    }\n\n    onChange(event) {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        if (this.state.newTask.trim() !== \"\") {\n            this.setState({\n                taskList: [this.state.newTask.trim(), ...this.state.taskList]\n            })\n        }\n        this.setState({\n            newTask: \"\"\n        })\n    }\n\n    removeTask(removeText) {\n        this.setState({\n            taskList: this.state.taskList.filter(task => task !== removeText)\n        })\n    }\n\n    render() {\n        todoItems = this.state.taskList.map(item => {\n            return <TodoItem key={shortid.generate()} taskText={item} removeTask={() => this.removeTask(item)} />\n        })\n        if (this.state.taskList[0] == null) {\n            todoItems = <TodoItem key={\"empty\"} taskText=\"No new tasks\" />\n        }\n        return (\n            <div className=\"todo-container\">\n                <div className=\"todo-list\">\n                    <h1>Todo App</h1>\n                    <form className=\"todo-form\" onSubmit={this.handleSubmit} autoComplete=\"off\">\n                        <input\n                            name=\"newTask\"\n                            value={this.state.newTask}\n                            type=\"text\"\n                            onChange={this.onChange}\n                            placeholder=\"Add new task...\"\n                        />\n                        <button>+</button>\n                    </form>\n                    <div className=\"task-container\">\n                        <div className=\"todo-items\">\n                            {todoItems}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default TodoList\n","import React from 'react';\nimport './App.css';\nimport Background from './components/Background'\nimport TodoList from './components/TodoList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Background />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}